apiVersion: v1
kind: Agent
base:
  model: qwen-plus
mcp_servers:
- name: fetch
  command: uvx
  args:
  - mcp-server-fetch
- name: git
  command: uvx
  args:
  - mcp-server-git
- name: filesystem
  command: npx
  args:
  - -y
  - '@modelcontextprotocol/server-filesystem'
  - /ws
- name: commands
  command: npx
  args:
  - mcp-server-commands
- name: github-mcp-server
  command: /server/github-mcp-server
  args:
  - stdio
  env:
    GITHUB_PERSONAL_ACCESS_TOKEN: ghp_...
agents:
- name: github-release-checker
  instruction: "Given a GitHub repository URL, find the latest **official release**\
    \ of the repository. An official release must meet **all** of the following conditions:\
    \ 1. It MUST be explicitly marked as **\u201CLatest\u201D** on the GitHub Releases\
    \ page. 2. It MUST **not** be marked as a **\u201CPre-release\u201D**. 3. Its\
    \ **tag** or **tag_name** MUST **not** contain pre-release identifiers such as\
    \ `rc`, `alpha`, `beta`, etc. (e.g., tags like `v0.9.1-rc0`, `v1.0.0-beta`, or\
    \ `v2.0.0-alpha` should be considered pre-releases and **ignored**). If a release\
    \ does not satisfy all these conditions, do **not** return it. Instead, continue\
    \ fetching additional releases until you find the most recent release that satisfies\
    \ the criteria. Once you find a valid release, return the **tag** of that release."
  servers:
  - fetch
  - github-mcp-server
- name: github-repository-cloner
  instruction: Given a GitHub repository URL and a release tag, clone the repository
    by using git clone command and checkout to the specified release tag. You should
    also ensure that the repository is cloned to the /ws directory.
  servers:
  - commands
  - git
  - filesystem
- name: latest-commit-checker
  instruction: Given a GitHub repository local path, check if the latest commit of
    the repository matches the specified release tag. If it does, return \"The latest
    commit matches the release tag.\" Otherwise, return \"The latest commit does not
    match the release tag.\"
  servers:
  - commands
  - git
  - filesystem
secrets:
- name: ALIYUN_API_KEY
  value: sk-...
dockerfile:
- instruction: COPY
  args:
  - --from=ghcr.io/github/github-mcp-server
  - /server/github-mcp-server
  - /server/github-mcp-server
- instruction: COPY
  args:
  - --from=ghcr.io/github/github-mcp-server
  - /etc/ssl/certs/ca-certificates.crt
  - /etc/ssl/certs/ca-certificates.crt
- instruction: ENV
  args:
  - SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
- instruction: RUN
  args:
  - apt-get
  - update
  - '&&'
  - apt-get
  - install
  - -y
  - --no-install-recommends
  - git
  - '&&'
  - rm
  - -rf
  - /var/lib/apt/lists/*
- instruction: RUN
  args:
  - mkdir
  - -p
  - /app
  - '&&'
  - mkdir
  - -p
  - /ws
- instruction: WORKDIR
  args:
  - /app
