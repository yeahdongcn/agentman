"""FastAgent framework builder using structured configuration."""

from dataclasses import dataclass, field
from typing import List, Dict, Any


@dataclass
class FastAgentConfig:
    """Structured configuration for FastAgent."""

    name: str = "Generated by Agentman"
    agents: List[Dict[str, Any]] = field(default_factory=list)
    routers: List[Dict[str, Any]] = field(default_factory=list)
    chains: List[Dict[str, Any]] = field(default_factory=list)
    orchestrators: List[Dict[str, Any]] = field(default_factory=list)
    has_prompt_file: bool = False


class FastAgentCodeGenerator:
    """Generate FastAgent code using structured configuration."""

    def __init__(self, config: FastAgentConfig):
        self.config = config

    def generate_imports(self) -> List[str]:
        """Generate import statements."""
        return [
            "import asyncio",
            "from mcp_agent.core.fastagent import FastAgent",
            "",
        ]

    def generate_app_creation(self) -> List[str]:
        """Generate FastAgent app creation."""
        return [
            "# Create the application",
            f'fast = FastAgent("{self.config.name}")',
            "",
        ]

    def generate_agent_decorators(self) -> List[str]:
        """Generate agent decorator definitions."""
        return [self._build_agent_decorator(agent_config) for agent_config in self.config.agents]

    def generate_router_decorators(self) -> List[str]:
        """Generate router decorator definitions."""
        return [self._build_router_decorator(router_config) for router_config in self.config.routers]

    def generate_chain_decorators(self) -> List[str]:
        """Generate chain decorator definitions."""
        return [self._build_chain_decorator(chain_config) for chain_config in self.config.chains]

    def generate_orchestrator_decorators(self) -> List[str]:
        """Generate orchestrator decorator definitions."""
        return [
            self._build_orchestrator_decorator(orchestrator_config) for orchestrator_config in self.config.orchestrators
        ]

    def generate_main_function(self) -> List[str]:
        """Generate main function and execution logic."""
        lines = ["async def main() -> None:", "    async with fast.run() as agent:"]

        if self.config.has_prompt_file:
            lines.extend(
                [
                    "        # Check if prompt.txt exists and load its content",
                    "        import os",
                    "        prompt_file = 'prompt.txt'",
                    "        if os.path.exists(prompt_file):",
                    "            with open(prompt_file, 'r', encoding='utf-8') as f:",
                    "                prompt_content = f.read().strip()",
                    "            if prompt_content:",
                    "                await agent(prompt_content)",
                    "            else:",
                    "                await agent()",
                    "        else:",
                    "            await agent()",
                ]
            )
        else:
            lines.extend(["        await agent()"])

        return lines

    def generate_entry_point(self) -> List[str]:
        """Generate script entry point."""
        return [
            "",
            "",
            'if __name__ == "__main__":',
            "    asyncio.run(main())",
        ]

    def generate_complete_code(self) -> str:
        """Generate the complete FastAgent Python code."""
        lines = []

        lines.extend(self.generate_imports())
        lines.extend(self.generate_app_creation())
        lines.extend(self.generate_agent_decorators())
        lines.extend(self.generate_router_decorators())
        lines.extend(self.generate_chain_decorators())
        lines.extend(self.generate_orchestrator_decorators())
        lines.extend(self.generate_main_function())
        lines.extend(self.generate_entry_point())

        return "\n".join(lines)

    def _build_agent_decorator(self, agent_config: Dict[str, Any]) -> str:
        """Build a @fast.agent decorator from configuration."""
        params = [f'name="{agent_config["name"]}"', f'instruction="""{agent_config["instruction"]}"""']

        if agent_config.get("servers"):
            servers_str = "[" + ", ".join(f'"{s}"' for s in agent_config["servers"]) + "]"
            params.append(f"servers={servers_str}")

        if agent_config.get("model"):
            params.append(f'model="{agent_config["model"]}"')

        if not agent_config.get("use_history", True):
            params.append("use_history=False")

        if agent_config.get("human_input"):
            params.append("human_input=True")

        if agent_config.get("default"):
            params.append("default=True")

        return "@fast.agent(\n    " + ",\n    ".join(params) + "\n)"

    def _build_router_decorator(self, router_config: Dict[str, Any]) -> str:
        """Build a @fast.router decorator from configuration."""
        params = [f'name="{router_config["name"]}"']

        if router_config.get("agents"):
            agents_str = "[" + ", ".join(f'"{a}"' for a in router_config["agents"]) + "]"
            params.append(f"agents={agents_str}")

        if router_config.get("model"):
            params.append(f'model="{router_config["model"]}"')

        if router_config.get("instruction"):
            params.append(f'instruction="""{router_config["instruction"]}"""')

        if router_config.get("default"):
            params.append("default=True")

        return "@fast.router(\n    " + ",\n    ".join(params) + "\n)"

    def _build_chain_decorator(self, chain_config: Dict[str, Any]) -> str:
        """Build a @fast.chain decorator from configuration."""
        params = [f'name="{chain_config["name"]}"']

        if chain_config.get("sequence"):
            sequence_str = "[" + ", ".join(f'"{s}"' for s in chain_config["sequence"]) + "]"
            params.append(f"sequence={sequence_str}")

        if chain_config.get("instruction"):
            params.append(f'instruction="""{chain_config["instruction"]}"""')

        if chain_config.get("cumulative"):
            params.append("cumulative=True")

        if chain_config.get("default"):
            params.append("default=True")

        return "@fast.chain(\n    " + ",\n    ".join(params) + "\n)"

    def _build_orchestrator_decorator(self, orchestrator_config: Dict[str, Any]) -> str:
        """Build a @fast.orchestrator decorator from configuration."""
        params = [f'name="{orchestrator_config["name"]}"']

        if orchestrator_config.get("agents"):
            agents_str = "[" + ", ".join(f'"{a}"' for a in orchestrator_config["agents"]) + "]"
            params.append(f"agents={agents_str}")

        if orchestrator_config.get("model"):
            params.append(f'model="{orchestrator_config["model"]}"')

        if orchestrator_config.get("instruction"):
            params.append(f'instruction="""{orchestrator_config["instruction"]}"""')

        if orchestrator_config.get("default"):
            params.append("default=True")

        return "@fast.orchestrator(\n    " + ",\n    ".join(params) + "\n)"
